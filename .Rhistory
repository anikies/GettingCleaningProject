a<-avalaible.packages()
a <- avalaible.packages()
a <- avalaible.packages();
a <- available.packages();
head(rownames(b),3)
head(rownames("b"),3)
head(rownames(a),3)
head(rownames(a),10)
library(devtools)
devtools::install_github("hadley/devtools")
install.packages("devtools")
devtools::install_github("hadley/devtools")
library(devtools)
find_rtools()
install.package("KernSmooth")
install.packages("KernSmooth")
library("KernSmooth")
import RCurl
install.packages("RCurl")
library(RCurl)
getURL("http://stats.grok.se/json/en/201410/Friday")
rawData = "http://stats.grok.se/json/en/201410/Friday"
rawData
rawData <- getURL("http://stats.grok.se/json/en/201410/Friday")
install.package("RJSONIO")
install.packages("RJSONIO")
library(RJSONIO)
fromJSON(rawData)
parsedData <- fromJSON(rawData)
parsedData$dayly_views
parsedData$daily_views
msg <- 'message'
msg
msg.lenght()
msg.length
msg.length()
len(msg)
v = vector(int,5)
v = vector(integer,5)
v = vector(numeric,5)
v = vector(Int,5)
x<-c(1,2)
x
x<-vector("numeric",length=155)
x
y<-c(1,'a')
y
f<-c('a','b')
f
as.numeric(f)
x<-list(1,'a',TRUE)
x
x[0]
x[0][0]
x[[0]]
x[0]
m <-matrix(2,4)
m
m <-matrix(nrow=2,ncol=4)
m
m[,1]
m[1]
x <-1:5
y <-10:15
cbind(x,y)
y <-10:14
cbind(x,y)
names(x) <-1:3
names(x) <-v1:3
names(x) <-1:3
(x <-1:3
x
x=1:3
names(x) = f
names(x)
names(x) = 1:3
x
l <-c(1,2,3)
l
l[[1]]
l[1]
class(l)
li=[1,2,3]
li <-[1,2,3]
li <- [1,2,3]
li <- (1,2,3)
x <- [1]
x <- (1)
x <- (1,2,3)
y <- (1,2,3)
l <- list(foo=1:3,bar=32)
l
l[1]
l[[1]
l[[1]]
l[[1]]
class([[[1]])
class([[1]])
class(l[[1]])
class(l[1])
z <-list(a = list(10,12,14),b=c(3.14,2.81))
x
z
z[1]1[1]
z[1][1]
z[1][3]
z[1][2]
z[1][1]
z[[1][1]]
z[[c(1,3)]]
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
(-5:20)
-(5:20)
select(cran,select(X:sieze)
select(cran,select(X:sieze))
select(cran,select(X:sieze))
select(cran,select(X:size))
select(cran,select(-(X:ip_id))
)
select(cran,select(-(X:ip_id)))
select(cran,-(X:ip_id)))
select(cran,-(X:ip_id))
select(cran,(-X:ip_id))
select(cran,(-X:-ip_id))
select(cran,-(X:ip_id))
cran
select(cran,-(X:ip_id))
select(cran,-(X:))
select(cran,-(X))
info()
select(cran,-(X:ncol(cran)))
select(cran,-(X:cran.size))
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.1.1", country IN "US")
filter(cran, r_version == "3.1.1", country IN "India")
filter(cran, r_version == "3.1.1", country == "India")
filter(cran, r_version <= "3.0.2", country == "India")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500,r_os equals "linux-gnu")
filter(cran, size>100500,r_os equals ="linux-gnu")
filter(cran, size>100500,r_os equals =="linux-gnu")
filter(cran, size>100500,r_os =="linux-gnu")
is.na(c(3, 5, NA, 10)).
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10)).
!is.na(c(3, 5, NA, 10))
filter(cran, is.na(r_version))
filter(cran, !is.na(r_version))
cran2<-select(x:ip_id)
cran2<-select(cran,x:ip_id)
cran2<-select(cran,X:ip_id)
cran2<-select(cran,size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country,desc(r_version),ip_id)
cran3<-select(ip_id,package,size)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20,size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10,correct_size = size-1000)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10,correct_size = size+1000)
mutate(cran3,correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- cran.group_by(package)
by_package <- group_by(package)
by_package <- group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit()
?n
submit()
tbl
pack_sum
quantile(pack_sum$count, probs = 0.99)
?filter
top_counts<-filter(pack_sum,count<679)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
op_counts_sorted <-arrange(cran,desc(count))
op_counts_sorted <- arrange(top_counts,desc(count))
op_counts_sorted <- arrange(top_counts,desc(count))
top_counts_sorted <- arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<-quantile(pack_sum$uniqye, probs = 0.99)
top_unique<-filter(pack_sum,count>465)
top_unique<-filter(pack_sum$unique,count>465)
top_unique<-filter(pack_sum,count>465)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View()
View(result3)
submit()
?select
submit()
?mutate
submit()
submit()
submit()
submit()
submit()
submit()
source('~/science-projects/githubcoursera.R', echo=TRUE)
source('~/science-projects/githubcoursera.R', echo=TRUE)
f<-read.url("http://biostat.jhsph.edu/~jleek/contact.html")
f<-con("http://biostat.jhsph.edu/~jleek/contact.html")
con<-url("http://biostat.jhsph.edu/~jleek/contact.html")
code<-readLines(con)
close(con)
code
nchar(10)
nchar(2)
nchar(code,2)
nchar(code)
code[10,]
code[10]
nchar(2)
nchar(1)
nchar(code[1])
nchar(code[10])
nchar(code[20])
nchar(code[20])
nchar(code[30])
nchar(code[100])
library(swirl)
swirl()
library(tidyr)
students
?gather
grade(students)
gather(students)
gather(students,sex,count,-grade)
students2
res<-gather(students2,sex_class,count)
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(data=res,col=sex_class,into=c("sex","class"))
submit()
students3
submit()
submit()
submit()
submit()
?gather
submit()
submit()
submit()
reset()
submit()
?spread()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
submit()
?extract
?extract_numeric
?mutate
submit()
submit()
now
students4
submit()
submit()
submit()
submit()
submit()
?unique
submit()
submit()
submit()
submit()
submit()
submit()
submit()
passed
failed
mutate(passed,value="passed")
mutate(passed,status="passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
??bind_rows
packageVersion('dplyr')
quit
exit
exit()
quit()
install.packages("dplyr")
library(dplyr)
library(swirl)
swirl()
?bind_rows
?bind_rows(passed,failed)
bind_rows(passed,failed)
sat
?separate
submit()
submit()
?group_by
submit()
submit()
source('~/science-projects/GettingCleaningProject/run_analysis.R', echo=TRUE)
setwd("~/science-projects/GettingCleaningProject")
source('~/science-projects/GettingCleaningProject/run_analysis.R', echo=TRUE)
write.table(dataGroupAvg,file="DataGroupAvg.txt",row.name=FALSE)
